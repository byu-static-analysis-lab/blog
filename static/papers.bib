
@inproceedings{van_horn_abstracting_2010,
	title = {Abstracting abstract machines},
	booktitle = {Proceedings of the 15th {ACM} {SIGPLAN} international conference on {Functional} programming},
	author = {Van Horn, David and Might, Matthew},
	year = {2010},
	keywords = {to-read},
	pages = {51--62},
}

@article{darais_abstracting_2017,
	title = {Abstracting {Definitional} {Interpreters} ({Functional} {Pearl})},
	volume = {1},
	number = {ICFP},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Darais, David and Labich, Nicholas and Nguyen, Phúc C and Van Horn, David},
	year = {2017},
	note = {Publisher: ACM New York, NY, USA},
	keywords = {to-read},
	pages = {1--25},
}

@article{sieczkowski_general_2023,
	title = {A {General} {Fine}-{Grained} {Reduction} {Theory} for {Effect} {Handlers}},
	volume = {7},
	number = {ICFP},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Sieczkowski, Filip and Pyzik, Mateusz and Biernacki, Dariusz},
	year = {2023},
	note = {Publisher: ACM New York, NY, USA},
	keywords = {extra-to-read},
	pages = {511--540},
	file = {Sieczkowski et al. - 2023 - A General Fine-Grained Reduction Theory for Effect.pdf:/home/tim/Zotero/storage/HSVA8RP6/Sieczkowski et al. - 2023 - A General Fine-Grained Reduction Theory for Effect.pdf:application/pdf},
}

@article{xie_generalized_2021,
	title = {Generalized evidence passing for effect handlers},
	journal = {Microsoft Research. Extended version with proofs},
	author = {Xie, Ningning and Leijen, Daan},
	year = {2021},
	keywords = {to-read},
}

@article{xie_generalized_2021-1,
	title = {Generalized evidence passing for effect handlers: efficient compilation of effect handlers to {C}},
	volume = {5},
	number = {ICFP},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Xie, Ningning and Leijen, Daan},
	year = {2021},
	note = {Publisher: ACM New York, NY, USA},
	keywords = {to-read},
	pages = {1--30},
}

@article{darais_galois_2015,
	title = {Galois transformers and modular abstract interpreters: reusable metatheory for program analysis},
	volume = {50},
	number = {10},
	journal = {ACM SIGPLAN Notices},
	author = {Darais, David and Might, Matthew and Van Horn, David},
	year = {2015},
	note = {Publisher: ACM New York, NY, USA},
	keywords = {to-read},
	pages = {552--571},
}

@article{danvy_refocusing_2004,
	title = {Refocusing in {Reduction} {Semantics}},
	volume = {11},
	issn = {1601-5355, 0909-0878},
	url = {https://tidsskrift.dk/brics/article/view/21851},
	doi = {10.7146/brics.v11i26.21851},
	abstract = {The evaluation function of a reduction semantics (i.e., a small-step operational semantics with an explicit representation of the reduction context) is canonically deﬁned as the transitive closure of (1) decomposing a term into a reduction context and a redex, (2) contracting this redex, and (3) plugging the contractum in the context. Directly implementing this evaluation function therefore yields an interpreter with a worst-case overhead, for each step, that is linear in the size of the input term.},
	language = {en},
	number = {26},
	urldate = {2024-11-08},
	journal = {BRICS Report Series},
	author = {Danvy, Olivier and Nielsen, Lasse R.},
	month = nov,
	year = {2004},
}

@inproceedings{plotkin_logic_2008,
	title = {A logic for algebraic effects},
	booktitle = {2008 23rd {Annual} {IEEE} symposium on logic in computer science},
	publisher = {IEEE},
	author = {Plotkin, Gordon and Pretnar, Matija},
	year = {2008},
	keywords = {to-read},
	pages = {118--129},
}

@inproceedings{plotkin_handlers_2009,
	title = {Handlers of algebraic effects},
	booktitle = {European {Symposium} on {Programming}},
	publisher = {Springer},
	author = {Plotkin, Gordon and Pretnar, Matija},
	year = {2009},
	keywords = {to-read},
	pages = {80--94},
}

@article{ramachandra_database-aware_2014,
	title = {Database-{Aware} {Program} {Optimization} via {Static} {Analysis}},
	volume = {37},
	number = {1},
	journal = {IEEE Data Eng. Bull.},
	author = {Ramachandra, Karthik and Guravannavar, Ravindra},
	year = {2014},
	pages = {60--69},
	file = {db-aware-optimization.pdf:/home/tim/Zotero/storage/AU838I3S/db-aware-optimization.pdf:application/pdf},
}

@inproceedings{vandenbroucke_fixing_2015,
	title = {Fixing non-determinism},
	booktitle = {Proceedings of the 27th {Symposium} on the {Implementation} and {Application} of {Functional} {Programming} {Languages}},
	author = {Vandenbroucke, Alexander and Schrijvers, Tom and Piessens, Frank},
	year = {2015},
	keywords = {to-read},
	pages = {1--12},
	file = {Vandenbroucke et al. - 2015 - Fixing non-determinism.pdf:/home/tim/Zotero/storage/M6PAKB4F/Vandenbroucke et al. - 2015 - Fixing non-determinism.pdf:application/pdf},
}

@inproceedings{gilray_allocation_2016,
	title = {Allocation characterizes polyvariance: a unified methodology for polyvariant control-flow analysis},
	booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} {International} {Conference} on {Functional} {Programming}},
	author = {Gilray, Thomas and Adams, Michael D and Might, Matthew},
	year = {2016},
	keywords = {to-read},
	pages = {407--420},
}

@inproceedings{might_resolving_2010,
	title = {Resolving and exploiting the k-{CFA} paradox: illuminating functional vs. object-oriented program analysis},
	booktitle = {Proceedings of the 31st {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	author = {Might, Matthew and Smaragdakis, Yannis and Van Horn, David},
	year = {2010},
	keywords = {to-read},
	pages = {305--315},
}

@article{keidel_combinator-based_2023,
	title = {Combinator-{Based} {Fixpoint} {Algorithms} for {Big}-{Step} {Abstract} {Interpreters}},
	volume = {7},
	url = {https://doi.org/10.1145/3607863},
	doi = {10.1145/3607863},
	abstract = {Big-step abstract interpreters are an approach to build static analyzers based on big-step interpretation. While big-step interpretation provides a number of benefits for the definition of an analysis, it also requires particularly complicated fixpoint algorithms because the analysis definition is a recursive function whose termination is uncertain. This is in contrast to other analysis approaches, such as small-step reduction, abstract machines, or graph reachability, where the analysis essentially forms a finite transition system between widened analysis states. We show how to systematically develop sophisticated fixpoint algorithms for big-step abstract interpreters and how to ensure their soundness. Our approach is based on small and reusable fixpoint combinators that can be composed to yield fixpoint algorithms. For example, these combinators describe the order in which the program is analyzed, how deep recursive functions are unfolded and loops unrolled, or they record auxiliary data such as a (context-sensitive) call graph. Importantly, each combinator can be developed separately, reused across analyses, and can be verified sound independently. Consequently, analysis developers can freely compose combinators to obtain sound fixpoint algorithms that work best for their use case. We provide a formal metatheory that guarantees a fixpoint algorithm is sound if its composed from sound combinators only. We experimentally validate our combinator-based approach by describing sophisticated fixpoint algorithms for analyses of Stratego, Scheme, and WebAssembly.},
	number = {ICFP},
	journal = {Proc. ACM Program. Lang.},
	author = {Keidel, Sven and Erdweg, Sebastian and Hombücher, Tobias},
	month = aug,
	year = {2023},
	note = {Place: New York, NY, USA
Publisher: Association for Computing Machinery},
	keywords = {Big-Step Abstract Interpretation, Fixpoint Algorithm, Static Analysis, to-read},
}

@book{shivers_control-flow_1991,
	title = {Control-flow analysis of higher-order languages or taming lambda},
	publisher = {Carnegie Mellon University},
	author = {Shivers, Olin Grigsby},
	year = {1991},
	keywords = {to-read},
}

@inproceedings{nicolay_effect-driven_2019,
	title = {Effect-driven flow analysis},
	booktitle = {Verification, {Model} {Checking}, and {Abstract} {Interpretation}: 20th {International} {Conference}, {VMCAI} 2019, {Cascais}, {Portugal}, {January} 13–15, 2019, {Proceedings} 20},
	publisher = {Springer},
	author = {Nicolay, Jens and Stiévenart, Quentin and De Meuter, Wolfgang and De Roover, Coen},
	year = {2019},
	keywords = {to-read},
	pages = {247--274},
	file = {Nicolay et al. - 2019 - Effect-driven flow analysis.pdf:/home/tim/Zotero/storage/36XGVRS8/Nicolay et al. - 2019 - Effect-driven flow analysis.pdf:application/pdf},
}
